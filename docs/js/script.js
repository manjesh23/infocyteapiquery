function opentab(e, s) { var a, n, t; for (n = document.getElementsByClassName("tabcontent"), a = 0; a < n.length; a++) n[a].style.display = "none", document.body.getElementsByClassName("landing").landing.innerHTML = ""; for (t = document.getElementsByClassName("tablinks"), a = 0; a < t.length; a++) t[a].className = t[a].className.replace(" active", "");
    document.getElementById(s).style.display = "block", e.currentTarget.className += " active" }

function flowdiag() { document.getElementsByName("railroad")[0].src = "regexmap.html", window.scrollBy(0, document.body.scrollHeight || document.documentElement.scrollHeight) }

function regexmatch() { var e = document.getElementById("yamlInput").value; if (e.replaceAll(/\n|\s/g, "").includes("hostOs")) { var s = e.slice(e.indexOf("&&") + 3).replace(/\n|\s|\"|\\/g, "").split("&&"); for (var a in s) console.log(s[a].split(/==|!=/)) } }

function trimMe(e) { e.value = e.value.replace(/\s\s|iregex\(\"|\"\)|iregex\(\'|\'\)/gi, " ").replace(/\s==\s|\":\"|\":\s\"/g, " = ").replace(/\"|,$/g, "").replace(/\(\n/g, "(").replace(/\n\)/g, ")") }

function buildrule() { var e = document.getElementById("mandate").value.replaceAll(/\n|,/g, " && ").replace(/=/g, ' == iregex("'),
        s = document.getElementById("logicand").value.replaceAll(/\n|,/g, " && ").replace(/=/g, ' == iregex("'),
        a = document.getElementById("logicor").value.replaceAll(/\n|,/g, " && ").replace(/=/g, ' == iregex("'),
        n = e.replaceAll(/\s&&\s/g, '") && ').replaceAll(/\s\|\|\s/g, '") || '),
        t = s.replaceAll(/\s&&\s/g, '") && ').replaceAll(/\s\|\|\s/g, '") || '),
        l = a.replaceAll(/\s&&\s/g, '") && ').replaceAll(/\s\|\|\s/g, '") || '); if ("" == e) var r = "Mandate field is Must";
    else if ("" == s && "" == a) r = n + '")';
    else if ("" == a) r = n + '") && ' + t + '")';
    else if ("" == s) r = n + '") || ' + l + '")';
    else r = n + '") && ' + t + '") || ' + l + '")'; var o = r.replaceAll(/\)\"\)/g, '"))').replaceAll(/\)\"\)\)/g, '")))').replaceAll(/\)\"\)\)\)/g, '"))))').replaceAll(/\b\s+\"|\"\s\b/g, '"').replaceAll(/!\s==/g, " != ").replaceAll(/\"\s|\s\"/g, '"').replaceAll(/\./g, "\\.").replaceAll(/\s&&\"\)/g, "").replaceAll(/iregex\(\"null\"\)/g, "null");
    document.getElementById("build").innerHTML = o }

function evlogs() { let e = document.querySelector("#evlogs");
    e.addEventListener("change", () => { let s = e.files; if (0 == s.length) return; const a = s[0]; if (Math.round(a.size / 1048576) < 10) { let e = new FileReader;
            e.readAsText(a), e.onload = (e => { var s = e.target.result; if (s.includes("InstanceID")) { var a = { "A service was installed in the system": '<span class="logsuccess">A service was installed in the system</span>', "The Infocyte HUNT Agent service is marked as an interactive service.": '<span class="logwarning">The Infocyte HUNT Agent service is marked as an interactive service</span>', "The Infocyte HUNT Agent service terminated unexpectedly.": '<span class="logdanger">The Infocyte HUNT Agent service terminated unexpectedly.</span>' }; let e = Object.keys(a); var n = JSON.stringify(e).replace(/,/g, "|").replace(/\[|\]|\"/g, ""),
                        t = new RegExp(n, "gi");
                    finalevlogs = s.replace(t, e => a[e]), document.getElementById("results").innerHTML = finalevlogs } else alert("Please upload Event Viewer logs"), window.location.reload() }), e.onerror = (e => alert(e.target.error.name)) } else alert("Keeping browser health in mind, file upload size is restricted to 10Meg"), window.location.reload() }) }

function alogs() { let e = document.querySelector("#alogs");
    e.addEventListener("change", () => { let s = e.files; if (0 == s.length) return; const a = s[0]; if (Math.round(a.size / 1048576) < 10) { let e = new FileReader;
            e.readAsText(a), e.onload = (e => { var s = e.target.result.replace(/,/g, "").split(/\r\n|\n/).join(",").replace(/,/g, "<br>"); if (s.includes("[agent::")) { var a = { "Agent has started": '<span class="logsuccess loginfoh">Agent has started</span>', "Starting as windows service": '<span class="logsuccess loginfoh">Starting as windows service</span>', "Results sent scan is complete": '<span class="logsuccess">Results sent scan is complete</span>', "Cannot execute jobs: Unable to post data: error sending request for url": '<span class="logdanger">Cannot execute jobs: Unable to post data: error sending request for url</span>', "Service stop signal received.": '<span class="logdanger">Service stop signal received.</span>', "Cannot save RTS data: unable to open database file": '<span class="logdanger">Cannot save RTS data: unable to open database file</span>', "Received stop signal from service controller": '<span class="logdanger">Received stop signal from service controller</span>', "error notifying wait possible future leak": '<span class="logdanger">error notifying wait possible future leak</span>', "Unable to put data: error sending request for url": '<span class="logdanger">Unable to put data: error sending request for url</span>', "unable to open database file": '<span class="logdanger">unable to open database file</span>', "Cannot finish fetching user accounts:": '<span class="logdanger">Cannot finish fetching user accounts:</span>', "Error communicating with API: Unable to post data: error sending request for url": '<span class="logdanger">Error communicating with API: Unable to post data: error sending request for url</span>', "os error 10051": '<span class="oserror10051 loginfoh">os error 10051</span>', "os error 10060": '<span class="oserror10060 loginfoh">os error 10060</span>', "os error 10054": '<span class="oserror10054 loginfoh">os error 10054</span>', "os error 10061": '<span class="oserror10061 loginfoh">os error 10061</span>', "os error 1450": '<span class="oserror1450 loginfoh">os error 1450</span>', "Enabling RTS": '<span class="logwarning">Enabling RTS</span>', "RTS Enabled": '<span class="logwarning">RTS Enabled</span>', "Notifying service controller that HUNT Agent is shutting down": '<span class="logwarning">Notifying service controller that HUNT Agent is shutting down</span>', "Enumerating running processes": '<span class="logprimary">Enumerating running processes</span>', "Enumerating drivers": '<span class="logprimary">Enumerating drivers</span>', "Enumerating autostart locations": '<span class="logprimary">Enumerating autostart locations</span>', "Enumerating users": '<span class="logprimary">Enumerating users</span>', "Run keys": '<span class="logprimary">Run keys</span>', AppInit_DLLs: '<span class="logprimary">AppInit_DLLs</span>', "WMI Persistence": '<span class="logprimary">WMI Persistence</span>', Services: '<span class="logprimary">Services</span>', "Accessibility features": '<span class="logprimary">Accessibility features</span>', Files: '<span class="logprimary">Files</span>', "Collecting important events": '<span class="logprimary">Collecting important events</span>', "Getting installed application list": '<span class="logprimary">Getting installed application list</span>' }; let e = Object.keys(a); var n = JSON.stringify(e).replace(/,/g, "|").replace(/\[|\]|\"/g, ""),
                        t = new RegExp(n, "gi");
                    finalalogs = s.replace(t, e => a[e]), finalalogs.includes("tzone:") ? (finalalogs = finalalogs.replace(/tzone:[a-zA-Z\/_]{0,50}/g, '<spanb id="tzonehere">$&</spanb>'), document.getElementById("results").innerHTML = finalalogs.replace(/\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{1,12}\sUTC/g, '<spanb id="tzonehere">$&</spanb>')) : document.getElementById("results").innerHTML = finalalogs.replace(/\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{1,12}\sUTC/g, '<spana id="tzoneconvert">$&</spana>') } else alert("Please upload Agent logs"), window.location.reload() }), e.onerror = (e => alert(e.target.error.name)) } else alert("Keeping browser health in mind, file upload size is restricted to 10Meg"), window.location.reload() }) }

function clogs() { let e = document.querySelector("#clogs");
    e.addEventListener("change", () => { let s = e.files; if (0 == s.length) return; const a = s[0]; if (Math.round(a.size / 1048576) < 10) { let e = new FileReader;
            e.readAsText(a), e.onload = (e => { var s = e.target.result; if (s.includes("Discovery:") || s.includes("PSRemoting/WinRM") || s.includes("ing Subscribers") || s.includes("[Error]")) { var a = { "Starting Subscribers": '<span class="logsuccess">Starting Subscribers</span>', "Access Check: SUCCEEDED!": '<span class="logsuccess">Access Check: SUCCEEDED!</span>', "Jobs loaded successfully": '<span class="logsuccess">Jobs loaded successfully</span>', "Target is live and accessible": '<span class="logsuccess">Target is live and accessible</span>', "Target is live": '<span class="logsuccess">Target is live</span>', "Connection to Infocyte API restored!": '<span class="logwarning">Connection to Infocyte API restored!</span>', "PSRemote Transfers may have issues unless you install Powershell": '<span class="logwarning">PSRemote Transfers may have issues unless you install Powershell</span>', "might be a duplicate host entry in Target Group": '<span class="logwarning">might be a duplicate host entry in Target Group</span>', "Heartbeat Rejected: Server responded with code Unauthorized:": '<span class="logdanger">Heartbeat Rejected: Server responded with code Unauthorized:</span>', "No Response to Heartbeat: An error occurred while sending the request": '<span class="logdanger">No Response to Heartbeat: An error occurred while sending the request</span>', "Access Check FAILED.": '<span class="logdanger">Access Check FAILED.</span>', "Access is denied.": '<span class="logdanger">Access is denied.</span>', "Unable to connect to the remote server": '<span class="logdanger">Unable to connect to the remote server</span>', "Host may not exist": '<span class="logdanger">Host may not exist</span>', "Target did not respond to any probes but was registered in DNS": '<span class="logdanger">Target did not respond to any probes but was registered in DNS</span>', "Requested registry access is not allowed.": '<span class="logdanger">Requested registry access is not allowed.</span>', "No such host is known": '<span class="logdanger">No such host is known</span>', "The network path was not found": '<span class="logdanger">The network path was not found</span>', "Discovery: Target did not respond to any probes and failed DNS resolution. Target MAY NOT EXIST on this network": '<span class="logdanger">Discovery: Target did not respond to any probes and failed DNS resolution. Target MAY NOT EXIST on this network</span>', "An error occurred while sending the request.. The request failed due to an underlying issue such as network connectivity or DNS failure": '<span class="logdanger">An error occurred while sending the request.. The request failed due to an underlying issue such as network connectivity or DNS failure</span>', INACCESSIBLE: '<span class="logdanger">INACCESSIBLE</span>', "Access denied!": '<span class="logdanger">Access denied!</span>', "Permission denied": '<span class="logdanger">Permission denied</span>', "Stopping Subscribers": '<span class="logdanger">Stopping Subscribers</span>', "All transport options failed": '<span class="logdanger">All transport options failed</span>', "SMB <Transport>: Could not get agentId via Remote Registry Service.": '<span class="logdanger">SMB <Transport>: Could not get agentId via Remote Registry Service.</span>', "0x800706BA": '<span><a class="logdanger" href="https://support.infocyte.com/hc/en-us/articles/115000986908-Troubleshooting-WMI-RPC-Windows-" target="_blank">0x800706BA</a></span>', "Successfully EXECUTED c:\\windows\\temp\\infocyte.exe": '<span class="logprimary">Successfully EXECUTED c:\\windows\\temp\\infocyte.exe</span>' }; let e = Object.keys(a); var n = JSON.stringify(e).replace(/,/g, "|").replace(/\[|\]|\"/g, ""),
                        t = new RegExp(n, "gi");
                    finalclogs = s.replace(t, e => a[e]), document.getElementById("results").innerHTML = finalclogs.replace(/<Transport>/g, "&lt;Transport&gt;").replace(/<None>/g, "&lt;None&gt;") } else alert("Please upload Controller logs"), window.location.reload() }), e.onerror = (e => alert(e.target.error.name)) } else alert("Keeping browser health in mind, file upload size is restricted to 10Meg"), window.location.reload() }) }

function guilogs() { document.getElementById("guilogs").className = "show" }

function gui() { document.getElementById("guilogs").className = "hide", document.getElementById("selectfilename").innerHTML = "GUI Logs selected: "; var e = event.clipboardData.getData("text/plain").replace(/Timeline|[A-Z]{3}\s\d{1,2}|\d{1,2}:\d\d:\d\d\s(a|p)m/g, ""),
        s = { Completed: '<span class="logsuccess">Completed</span>', "Incyte job check - completed!": '<span class="logsuccess">Incyte job check - completed!</span>', "Incyte: Finished enrichment data load": '<span class="logsuccess">Incyte: Finished enrichment data load</span>', "Finished database load": '<span class="logsuccess">Finished database load</span>', Heartbeat: '<span class="logwarning">Heartbeat</span>', "Executing via agent": '<span class="logwarning">Executing via agent</span>', "might be a duplicate host entry in Target Group": '<span class="logwarning">might be a duplicate host entry in Target Group</span>', "Failed: At least 300s since last heartbeat": '<span><a class="logdanger" href="https://support.infocyte.com/hc/en-us/articles/360040640871-What-does-Failed-At-least-300s-since-last-heartbeat-mean-" target="_blank">Failed: At least 300s since last heartbeat</a></span>', "Failed: At least 600s since attempting upload": '<span><a class="logdanger" href="https://support.infocyte.com/hc/en-us/articles/360040640871-What-does-Failed-At-least-300s-since-last-heartbeat-mean-" target="_blank">Failed: At least 600s since attempting upload</a></span>', "Survey completed in ": '<span class="logprimary">Survey completed in </span>' }; let a = Object.keys(s); var n = JSON.stringify(a).replace(/,/g, "|").replace(/\[|\]|\"/g, ""),
        t = new RegExp(n, "gi"); let l = e.match(/on\shost\s.([^\s]+)/g)[0].split(" ")[2];
    guiresult = e.replace(t, e => s[e]), document.getElementById("results").innerHTML = '<h3>Scan logs for the host: <span style="color: #99b3ff">' + l + "</span></h3>" + guiresult }